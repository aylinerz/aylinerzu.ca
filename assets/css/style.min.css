/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2018. MIT licensed.
 */
.clear:after,.clear:before{content:" ";display:table}.clear{*zoom:1}.clear:after{clear:both}*{box-sizing:border-box;font-smoothing:antialiased;text-rendering:optimizeLegibility}html{font-size:62.5%}body{font:300 13px/1.6 Poppins,Helvetica,Arial;color:#444;transition:all .4s ease-in .3s}body,html{min-height:100vh}

/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}[hidden],template{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit;font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,select,textarea{font:inherit;margin:0}optgroup{font-weight:700}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.logo{margin:-58px 0 0 -100px;position:absolute;top:50%;left:50%}.nav ul{list-style:none}.content{position:relative;max-width:90%;margin:auto;z-index:5;overflow:hidden}@media (min-width:767px){.content{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;min-height:100vh}}.back-arrow{position:fixed;z-index:2222;background:#fff;left:0;bottom:0;padding:4px;border-radius:0;cursor:pointer;text-decoration:none;font-size:18px;width:100%;display:inline-block;text-align:center;mix-blend-mode:unset;background:hsla(0,0%,100%,.8)}@media (min-width:767px){.back-arrow{position:absolute;width:auto;z-index:2222;background:#fff;left:15px;bottom:15px;padding:15px;border-radius:5px;cursor:pointer;text-decoration:none;font-size:21px;mix-blend-mode:overlay}}.back-arrow span{color:#666;transition:all 1s cubic-bezier(.2,1,.3,1)}.back-arrow:hover span{color:#000}.back-arrow svg{width:30px;vertical-align:middle;height:auto;cursor:pointer;overflow:visible}.back-arrow svg path,.back-arrow svg polygon{transition:all .5s cubic-bezier(.2,1,.3,1);fill:#666}.back-arrow:hover path,.back-arrow:hover svg polygon{transition:all 1s cubic-bezier(.2,1,.3,1);fill:#000}.back-arrow:hover svg .arrow{animation:f 2.5s cubic-bezier(.2,1,.3,1) infinite}.back-arrow:hover svg .arrow-fixed{animation:g 2.5s cubic-bezier(.2,1,.3,1) infinite}.cards{width:100%;margin:60px auto}@media (min-width:1030px){.cards{max-width:940px}}@media (min-width:767px){.cards--half-width{max-width:560px}}.cards__card{width:100%;height:150px;background:hsla(0,0%,100%,.7);margin-bottom:5px;z-index:22}@media (min-width:600px){.cards__card{width:calc(50% - 2.5px);height:250px}}@media (min-width:767px){.cards__card{width:calc(25% - 5px)}}.cards__card--fat,.cards__card--full{width:100%;mix-blend-mode:overlay}.cards__card--fat{transform:rotateX(.01deg)}@media (min-width:600px){.cards__card--fat{width:100%}}@media (min-width:767px){.cards__card--fat{width:calc(50% - 5px)}}.cards__card--short{height:165px}.cards__card__inputs{height:auto}.cards__card__inputs-container{position:relative;margin:15px}.cards__card__inputs-input{width:100%;border:none;background:transparent;padding:10px 5px 4px 0;border-bottom:2px solid #666;font-size:18px;box-shadow:none}.cards__card__inputs-input.active+label,.cards__card__inputs-input:focus+label{transform:translateY(-16px) scale(.6)}.cards__card__inputs-input:focus{border-bottom:2px solid #000}.cards__card__inputs-input:invalid{border-bottom:3px solid red}.cards__card__inputs textarea{font-size:16px}.cards__card__inputs label{position:absolute;top:0;left:0;font-size:18px;cursor:text;transition:transform .2s ease-out,color .2s ease-out;transform-origin:0 100%;text-align:initial;transform:translateY(8px)}.cards__card__inputs button{width:100%;border:0;padding:8px 4px;font-size:22px;cursor:pointer;transition:.3s;color:#666;font-weight:700}.cards__card__inputs button:hover{color:#000}.cards__card--tall{display:none}@media (min-width:767px){.cards__card--tall{height:760px;display:block}}.cards__card-sizer{width:calc(50% - 2.5px)}@media (min-width:600px){.cards__card-sizer{width:calc(50% - 2.5px)}}@media (min-width:767px){.cards__card-sizer{width:calc(5% - 5px)}}.cards__card--content{mix-blend-mode:unset;padding:0 20px;overflow-y:scroll;height:auto}@media (min-width:767px){.cards__card--content{height:505px}}.cards__card-link{color:#444;font-weight:700;padding:2px;text-decoration:none;font-size:14px;position:relative;display:inline-block}.cards__card-link:after{width:90%;transition:.53s}.cards__card-link:after,.cards__card-link:before{content:"";display:block;height:2px;bottom:3px;left:50%;position:absolute;background:#444;transform:translateX(-50%)}.cards__card-link:before{width:81%;transition:.3s;transition-timing-function:ease-in}.cards__card-link:hover:before{transform:translateX(-50%) translateY(6px)}.cards__card-title{display:-ms-flexbox;display:flex;height:100%;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;margin:0;color:#000;font-size:2em}@media (min-width:767px){.cards__card-title{font-size:3em}}.cards__card-title--big{font-size:3em}@media (min-width:500px){.cards__card-title--big{font-size:4em}}@media (min-width:767px){.cards__card-title--big{font-size:3.7em}}@media (min-width:1030px){.cards__card-title--big{font-size:4.7em}}.cards__card-image{mix-blend-mode:unset}.cards__card-image:after{content:"";background-image:url(../img/aylin.jpg);background-size:cover;background-position:50%;transform:scaleX(-1);filter:FlipH;-ms-filter:"FlipH";left:5px;width:calc(100% - 10px);bottom:5px;height:calc(100% - 10px);top:5px;right:5px;position:absolute}.cards__card-item{perspective:1000px;background:transparent;z-index:2;transform:scale3d()}.cards__card-item-flipper{transition:.6s;transform-style:preserve-3d;position:relative;height:100%;background:hsla(0,0%,100%,.7);will-change:transform}.cards__card-item:hover{mix-blend-mode:overlay}.cards__card-item:hover .cards__card-item-flipper{transform:rotateY(180deg) scale(.81)}.cards__card-item:hover .cards__card-item-back-text{transform:scale(1)}.cards__card-item-back,.cards__card-item-front{-webkit-backface-visibility:hidden;backface-visibility:hidden;position:absolute;top:5px;left:5px}.cards__card-item-front{background-size:cover;background-position:50%;background-blend-mode:darken;left:5px;width:calc(100% - 10px);bottom:5px;height:calc(100% - 10px);top:5px;right:5px;position:absolute;z-index:2}.cards__card-item-front--contain{background-size:contain;background-repeat:no-repeat}.cards__card-item-back{transform:rotateY(180deg);display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;height:calc(100% - 10px);width:calc(100% - 10px)}.cards__card-item-back-text{transform:scale(.01);font-size:32px;font-weight:800;color:#000}.cards__card-item-back-text a{font-size:16px;display:block}canvas{top:0;left:0;position:fixed!important;width:100%!important;height:100%!important}strong{font-weight:900}::selection{background:#333;color:#fff;text-shadow:none}::-moz-selection{background:#333;color:#fff;text-shadow:none}::-webkit-selection{background:#333;color:#fff;text-shadow:none}.animated{animation-duration:1s;animation-fill-mode:backwards}@keyframes a{0%,20%,40%,60%,80%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:scale3d(.3,.3,.3)}20%{transform:scale3d(1.1,1.1,1.1)}40%{transform:scale3d(.9,.9,.9)}60%{opacity:1;transform:scale3d(1.03,1.03,1.03)}80%{transform:scale3d(.97,.97,.97)}to{opacity:1;transform:scaleX(1)}}.bounceIn{animation-duration:.75s;animation-name:a}@keyframes b{0%{transform:translate3d(-60%,0,0);opacity:0}to{transform:translateZ(0);opacity:1}}.slideInRight{animation-name:b}@keyframes c{0%{opacity:0;transform:scale(.3)}50%{opacity:1}to{transform:scale(1)}}@keyframes d{0%{opacity:0;transform:scale(2)}50%{opacity:.6}to{opacity:1;transform:scale(1);color:#666}}.zoomIn{animation-name:c}.zoomIn-alt{animation-name:d;animation-duration:1s;animation-fill-mode:both}@keyframes e{0%{opacity:0}to{opacity:1}}.fadeIn{animation-name:e}@keyframes f{0%{opacity:1;transform:translateX(0)}5%{transform:translateX(-.1rem)}to{transform:translateX(1rem);opacity:0}}@keyframes g{5%{opacity:0}20%{opacity:.4}to{opacity:1}}@keyframes h{0%{transform:perspective(600px) rotateY(90deg);animation-timing-function:ease-in;opacity:0}40%{transform:perspective(600px) rotateY(-20deg);animation-timing-function:ease-in}60%{transform:perspective(600px) rotateY(10deg);opacity:1}80%{transform:perspective(600px) rotateY(-5deg)}to{transform:perspective(600px)}}.flipInY{-webkit-backface-visibility:visible!important;backface-visibility:visible!important;animation-name:h}@media print{*{background:transparent!important;color:#000!important;box-shadow:none!important;text-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:" (" attr(href) ")"}abbr[title]:after{content:" (" attr(title) ")"}.ir a:after,a[href^="#"]:after,a[href^="javascript:"]:after{content:""}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}img{max-width:100%!important}@page{margin:.5cm}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
