/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2020. MIT licensed.
 */
!function(t,s,a,e){"use strict";var n={canvas1:a.getElementById("canvas1"),canvas2:a.getElementById("canvas2"),activeCanvas:!0,setBackground:function(){var a=Trianglify({width:s.innerWidth,height:s.innerHeight,x_colors:this.getColor(),variance:.9,cell_size:Math.floor(10*Math.random()+60)});this.activeCanvas?(a.canvas(this.canvas1),t("#canvas2").fadeOut(3e3),this.activeCanvas=!1):(a.canvas(this.canvas2),t("#canvas2").fadeIn(3e3),this.activeCanvas=!0)},getColor:function(){var s=[];return s=t("body").hasClass("bg-colors")?["YlGn","Greys","Blues","RdPu","PuBuGn","Purples","PuOr"]:["Greys"],s[Math.floor(Math.random()*s.length)]},init:function(){var t=this;this.setBackground(),setInterval(function(){t.setBackground()},7e3)},resize:function(){}};if(n.init(),t(".js-scroll").length&&t(".js-scroll").each(function(t){new PerfectScrollbar(this)}),t(".slider").length&&t(".slider").slick({autoplay:!0,autoplaySpeed:4e3}),t(".js-count").length){var i={strings:["5th","5th","7th","8th","9th","10th","11th","12th","13th","14th+ (I've lost count)"],typeSpeed:90,backSpeed:80,backDelay:1200,startDelay:14e3};new Typed(".js-count",i)}t(".cards-iso").isotope({itemSelector:".cards__card",percentPosition:!0,masonry:{columnWidth:".cards__card-sizer",gutter:5}});t("#js-forms").length&&(t("#js-forms .cards__card__inputs-input").on("click focus",function(){t(this).addClass("active")}),t("#js-forms .cards__card__inputs-input").on("focusout",function(){""==t(this).val()&&t(this).removeClass("active")})),t(s).resize(function(){n.resize()})}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsImRvY3VtZW50IiwidW5kZWZpbmVkIiwicGF0dGVybnMiLCJjYW52YXMxIiwiZ2V0RWxlbWVudEJ5SWQiLCJjYW52YXMyIiwiYWN0aXZlQ2FudmFzIiwic2V0QmFja2dyb3VuZCIsInBhdHRlcm4iLCJUcmlhbmdsaWZ5Iiwid2lkdGgiLCJpbm5lcldpZHRoIiwiaGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJ4X2NvbG9ycyIsInRoaXMiLCJnZXRDb2xvciIsInZhcmlhbmNlIiwiY2VsbF9zaXplIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY2FudmFzIiwiZmFkZU91dCIsImZhZGVJbiIsImNvbG9ycyIsImhhc0NsYXNzIiwibGVuZ3RoIiwiaW5pdCIsInNlbGYiLCJzZXRJbnRlcnZhbCIsInJlc2l6ZSIsImVhY2giLCJpbmRleCIsIlBlcmZlY3RTY3JvbGxiYXIiLCJzbGljayIsImF1dG9wbGF5IiwiYXV0b3BsYXlTcGVlZCIsIm9wdGlvbnMiLCJzdHJpbmdzIiwidHlwZVNwZWVkIiwiYmFja1NwZWVkIiwiYmFja0RlbGF5Iiwic3RhcnREZWxheSIsIlR5cGVkIiwiaXNvdG9wZSIsIml0ZW1TZWxlY3RvciIsInBlcmNlbnRQb3NpdGlvbiIsIm1hc29ucnkiLCJjb2x1bW5XaWR0aCIsImd1dHRlciIsIm9uIiwiYWRkQ2xhc3MiLCJ2YWwiLCJyZW1vdmVDbGFzcyIsImpRdWVyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Q0FBQSxTQUFBQSxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLFlBR0EsSUFBQUMsSUFDQUMsUUFBQUgsRUFBQUksZUFBQSxXQUNBQyxRQUFBTCxFQUFBSSxlQUFBLFdBQ0FFLGNBQUEsRUFFQUMsY0FBQSxXQUNBLEdBQUFDLEdBQUFDLFlBQ0FDLE1BQUFYLEVBQUFZLFdBQ0FDLE9BQUFiLEVBQUFjLFlBQ0FDLFNBQUFDLEtBQUFDLFdBQ0FDLFNBQUEsR0FDQUMsVUFBQUMsS0FBQUMsTUFBQSxHQUFBRCxLQUFBRSxTQUFBLEtBR0FOLE1BQUFULGNBQ0FFLEVBQUFjLE9BQUFQLEtBQUFaLFNBQ0FMLEVBQUEsWUFBQXlCLFFBQUEsS0FDQVIsS0FBQVQsY0FBQSxJQUVBRSxFQUFBYyxPQUFBUCxLQUFBVixTQUNBUCxFQUFBLFlBQUEwQixPQUFBLEtBQ0FULEtBQUFULGNBQUEsSUFHQVUsU0FBQSxXQUNBLEdBQUFTLEtBT0EsT0FMQUEsR0FEQTNCLEVBQUEsUUFBQTRCLFNBQUEsY0FDQSxPQUFBLFFBQUEsUUFBQSxPQUFBLFNBQUEsVUFBQSxTQUdBLFNBRUFELEVBQUFOLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFJLEVBQUFFLFVBRUFDLEtBQUEsV0FDQSxHQUFBQyxHQUFBZCxJQUNBQSxNQUFBUixnQkFDQXVCLFlBQUEsV0FDQUQsRUFBQXRCLGlCQUNBLE1BRUF3QixPQUFBLGFBa0NBLElBeEJBN0IsRUFBQTBCLE9BS0E5QixFQUFBLGNBQUE2QixRQUNBN0IsRUFBQSxjQUFBa0MsS0FBQSxTQUFBQyxHQUNBLEdBQUFDLGtCQUFBbkIsUUFNQWpCLEVBQUEsV0FBQTZCLFFBQ0E3QixFQUFBLFdBQUFxQyxPQUVBQyxVQUFBLEVBQ0FDLGNBQUEsTUFPQXZDLEVBQUEsYUFBQTZCLE9BQ0EsQ0FBQSxHQUFBVyxJQUNBQyxTQUFBLE1BQUEsTUFBQSxNQUFBLE1BQUEsTUFBQSxPQUFBLE9BQUEsT0FBQSxPQUFBLDJCQUNBQyxVQUFBLEdBQ0FDLFVBQUEsR0FDQUMsVUFBQSxLQUNBQyxXQUFBLEtBRUEsSUFBQUMsT0FBQSxZQUFBTixHQVFBeEMsRUFBQSxjQUFBK0MsU0FDQUMsYUFBQSxlQUNBQyxpQkFBQSxFQUNBQyxTQUNBQyxZQUFBLHFCQUNBQyxPQUFBLElBS0FwRCxHQUFBLGFBQUE2QixTQUVBN0IsRUFBQSx3Q0FBQXFELEdBQUEsY0FBQSxXQUNBckQsRUFBQWlCLE1BQUFxQyxTQUFBLFlBRUF0RCxFQUFBLHdDQUFBcUQsR0FBQSxXQUFBLFdBQ0EsSUFBQXJELEVBQUFpQixNQUFBc0MsT0FDQXZELEVBQUFpQixNQUFBdUMsWUFBQSxhQU9BeEQsRUFBQUMsR0FBQWdDLE9BQUEsV0FDQTdCLEVBQUE2QixZQUdBd0IsT0FBQXhELE9BQUFDIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG5cclxuICAgICAgdmFyIHBhdHRlcm5zID0ge1xyXG4gICAgICAgICAgY2FudmFzMSA6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzMVwiKSxcclxuICAgICAgICAgIGNhbnZhczIgOiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXMyXCIpLFxyXG4gICAgICAgICAgYWN0aXZlQ2FudmFzIDogdHJ1ZSxcclxuXHJcbiAgICAgICAgICBzZXRCYWNrZ3JvdW5kIDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIHZhciBwYXR0ZXJuID0gVHJpYW5nbGlmeSh7XHJcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCxcclxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgIHhfY29sb3JzOiB0aGlzLmdldENvbG9yKCksXHJcbiAgICAgICAgICAgICAgICAgIHZhcmlhbmNlOiAwLjksXHJcbiAgICAgICAgICAgICAgICAgIGNlbGxfc2l6ZTogTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSAqIDEwKSArIDYwKSxcclxuICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlQ2FudmFzKSB7XHJcbiAgICAgICAgICAgICAgICAgIHBhdHRlcm4uY2FudmFzKHRoaXMuY2FudmFzMSk7XHJcbiAgICAgICAgICAgICAgICAgICQoXCIjY2FudmFzMlwiKS5mYWRlT3V0KDMwMDApO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZUNhbnZhcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIHBhdHRlcm4uY2FudmFzKHRoaXMuY2FudmFzMik7XHJcbiAgICAgICAgICAgICAgICAgICQoXCIjY2FudmFzMlwiKS5mYWRlSW4oMzAwMCk7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlQ2FudmFzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZ2V0Q29sb3I6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgdmFyIGNvbG9ycyA9IFtdO1xyXG4gICAgICAgICAgICAgIGlmICgkKFwiYm9keVwiKS5oYXNDbGFzcyhcImJnLWNvbG9yc1wiKSkge1xyXG4gICAgICAgICAgICAgICAgICBjb2xvcnMgPSBbXCJZbEduXCIsICdHcmV5cycsICdCbHVlcycsICdSZFB1JywgJ1B1QnVHbicsICdQdXJwbGVzJywgJ1B1T3InXVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgY29sb3JzID0gWydHcmV5cyddXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHJldHVybiBjb2xvcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY29sb3JzLmxlbmd0aCldXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgIHRoaXMuc2V0QmFja2dyb3VuZCgpXHJcbiAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgIHNlbGYuc2V0QmFja2dyb3VuZCgpXHJcbiAgICAgICAgICAgICAgfSwgNzAwMClcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIC8vIHRoaXMuY2FudmFzMS5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgLy8gdGhpcy5jYW52YXMxLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICAgICAgICAgICAgLy8gdGhpcy5jYW52YXMyLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgICAgICAgICAvLyB0aGlzLmNhbnZhczIud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICBwYXR0ZXJucy5pbml0KCk7XHJcblxyXG5cclxuXHJcbiAgICAvLyBpbml0IHNjcm9sbGJhciBpbiBhYm91dCBwYWdlXHJcbiAgICBpZigkKFwiLmpzLXNjcm9sbFwiKS5sZW5ndGgpIHtcclxuICAgICAgICAkKFwiLmpzLXNjcm9sbFwiKS5lYWNoKGZ1bmN0aW9uKCBpbmRleCApIHtcclxuICAgICAgICAgICAgY29uc3QgcHMgPSBuZXcgUGVyZmVjdFNjcm9sbGJhcih0aGlzKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBJbml0IHNsaWRlclxyXG4gICAgaWYoJChcIi5zbGlkZXJcIikubGVuZ3RoKSB7XHJcbiAgICAgICAgJCgnLnNsaWRlcicpLnNsaWNrKHtcclxuICAgICAgICAgICAgLy8gYXJyb3dzOiBmYWxzZSxcclxuICAgICAgICAgICAgYXV0b3BsYXk6IHRydWUsXHJcbiAgICAgICAgICAgIGF1dG9wbGF5U3BlZWQ6IDQwMDAsXHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgaWYoJChcIi5qcy1jb3VudFwiKS5sZW5ndGgpIHtcclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc3RyaW5nczogW1wiNXRoXCIsIFwiNXRoXCIsIFwiN3RoXCIsIFwiOHRoXCIsIFwiOXRoXCIsIFwiMTB0aFwiLCBcIjExdGhcIiwgXCIxMnRoXCIsIFwiMTN0aFwiLCBcIjE0dGgrIChJJ3ZlIGxvc3QgY291bnQpXCJdLFxyXG4gICAgICAgICAgICB0eXBlU3BlZWQ6IDkwLFxyXG4gICAgICAgICAgICBiYWNrU3BlZWQ6IDgwLFxyXG4gICAgICAgICAgICBiYWNrRGVsYXk6IDEyMDAsXHJcbiAgICAgICAgICAgIHN0YXJ0RGVsYXk6IDE0MDAwLFxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdHlwZWQgPSBuZXcgVHlwZWQoXCIuanMtY291bnRcIiwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIHNcclxuXHJcblxyXG4gIC8vIEdyaWRcclxuICAgIHZhciAkZ3JpZCA9ICQoJy5jYXJkcy1pc28nKS5pc290b3BlKHtcclxuICAgICAgICBpdGVtU2VsZWN0b3I6ICcuY2FyZHNfX2NhcmQnLFxyXG4gICAgICAgIHBlcmNlbnRQb3NpdGlvbjogdHJ1ZSxcclxuICAgICAgICBtYXNvbnJ5OiB7XHJcbiAgICAgICAgICAgIGNvbHVtbldpZHRoOiAnLmNhcmRzX19jYXJkLXNpemVyJyxcclxuICAgICAgICAgICAgZ3V0dGVyOiA1XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIGlmKCQoXCIjanMtZm9ybXNcIikubGVuZ3RoKSB7XHJcblxyXG4gICAgICAgICQoXCIjanMtZm9ybXMgLmNhcmRzX19jYXJkX19pbnB1dHMtaW5wdXRcIikub24oXCJjbGljayBmb2N1c1wiLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdhY3RpdmUnKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgJChcIiNqcy1mb3JtcyAuY2FyZHNfX2NhcmRfX2lucHV0cy1pbnB1dFwiKS5vbihcImZvY3Vzb3V0XCIsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGlmKCQodGhpcykudmFsKCkgPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgJCggd2luZG93ICkucmVzaXplKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHBhdHRlcm5zLnJlc2l6ZSgpXHJcbiAgICB9KTtcclxuXHJcbn0pKGpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XHJcbiJdfQ==
