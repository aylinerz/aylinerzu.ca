/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2018. MIT licensed.
 */
!function(t,a,e,n){"use strict";var s={canvas1:e.getElementById("canvas1"),canvas2:e.getElementById("canvas2"),activeCanvas:!0,setBackground:function(){var e=Trianglify({width:a.innerWidth,height:a.innerHeight,x_colors:this.getColor(),variance:.9,cell_size:Math.floor(10*Math.random()+60)});this.activeCanvas?(e.canvas(this.canvas1),t("#canvas2").fadeOut(3e3),this.activeCanvas=!1):(e.canvas(this.canvas2),t("#canvas2").fadeIn(3e3),this.activeCanvas=!0)},getColor:function(){var t=["YlGn","Greys","Blues","RdPu","PuBuGn","Purples","PuOr"];return t[Math.floor(Math.random()*t.length)]},init:function(){var t=this;this.setBackground(),setInterval(function(){t.setBackground()},7e3)},resize:function(){}};if(s.init(),t(".js-scroll").length&&t(".js-scroll").each(function(t){new PerfectScrollbar(this)}),t(".slider").length&&t(".slider").slick({autoplay:!0,autoplaySpeed:4e3}),t(".js-count").length){var i={strings:["5th","5th","7th","8th","9th","10th","11th","12th","13th","14th+ (I've lost count)"],typeSpeed:90,backSpeed:80,backDelay:1200,startDelay:14e3};new Typed(".js-count",i)}t(".cards-iso").isotope({itemSelector:".cards__card",percentPosition:!0,masonry:{columnWidth:".cards__card-sizer",gutter:5}});t("#js-forms").length&&(t("#js-forms .cards__card__inputs-input").on("click focus",function(){t(this).addClass("active")}),t("#js-forms .cards__card__inputs-input").on("focusout",function(){""==t(this).val()&&t(this).removeClass("active")})),t(a).resize(function(){s.resize()})}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsImRvY3VtZW50IiwidW5kZWZpbmVkIiwicGF0dGVybnMiLCJjYW52YXMxIiwiZ2V0RWxlbWVudEJ5SWQiLCJjYW52YXMyIiwiYWN0aXZlQ2FudmFzIiwic2V0QmFja2dyb3VuZCIsInBhdHRlcm4iLCJUcmlhbmdsaWZ5Iiwid2lkdGgiLCJpbm5lcldpZHRoIiwiaGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJ4X2NvbG9ycyIsInRoaXMiLCJnZXRDb2xvciIsInZhcmlhbmNlIiwiY2VsbF9zaXplIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY2FudmFzIiwiZmFkZU91dCIsImZhZGVJbiIsImNvbG9ycyIsImxlbmd0aCIsImluaXQiLCJzZWxmIiwic2V0SW50ZXJ2YWwiLCJyZXNpemUiLCJlYWNoIiwiaW5kZXgiLCJQZXJmZWN0U2Nyb2xsYmFyIiwic2xpY2siLCJhdXRvcGxheSIsImF1dG9wbGF5U3BlZWQiLCJvcHRpb25zIiwic3RyaW5ncyIsInR5cGVTcGVlZCIsImJhY2tTcGVlZCIsImJhY2tEZWxheSIsInN0YXJ0RGVsYXkiLCJUeXBlZCIsImlzb3RvcGUiLCJpdGVtU2VsZWN0b3IiLCJwZXJjZW50UG9zaXRpb24iLCJtYXNvbnJ5IiwiY29sdW1uV2lkdGgiLCJndXR0ZXIiLCJvbiIsImFkZENsYXNzIiwidmFsIiwicmVtb3ZlQ2xhc3MiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0NBQUEsU0FBQUEsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxZQUdBLElBQUFDLElBQ0FDLFFBQUFILEVBQUFJLGVBQUEsV0FDQUMsUUFBQUwsRUFBQUksZUFBQSxXQUNBRSxjQUFBLEVBRUFDLGNBQUEsV0FDQSxHQUFBQyxHQUFBQyxZQUNBQyxNQUFBWCxFQUFBWSxXQUNBQyxPQUFBYixFQUFBYyxZQUNBQyxTQUFBQyxLQUFBQyxXQUNBQyxTQUFBLEdBQ0FDLFVBQUFDLEtBQUFDLE1BQUEsR0FBQUQsS0FBQUUsU0FBQSxLQUdBTixNQUFBVCxjQUNBRSxFQUFBYyxPQUFBUCxLQUFBWixTQUNBTCxFQUFBLFlBQUF5QixRQUFBLEtBQ0FSLEtBQUFULGNBQUEsSUFFQUUsRUFBQWMsT0FBQVAsS0FBQVYsU0FDQVAsRUFBQSxZQUFBMEIsT0FBQSxLQUNBVCxLQUFBVCxjQUFBLElBR0FVLFNBQUEsV0FDQSxHQUFBUyxJQUFBLE9BQUEsUUFBQSxRQUFBLE9BQUEsU0FBQSxVQUFBLE9BQ0EsT0FBQUEsR0FBQU4sS0FBQUMsTUFBQUQsS0FBQUUsU0FBQUksRUFBQUMsVUFFQUMsS0FBQSxXQUNBLEdBQUFDLEdBQUFiLElBQ0FBLE1BQUFSLGdCQUNBc0IsWUFBQSxXQUNBRCxFQUFBckIsaUJBQ0EsTUFFQXVCLE9BQUEsYUFrQ0EsSUF4QkE1QixFQUFBeUIsT0FLQTdCLEVBQUEsY0FBQTRCLFFBQ0E1QixFQUFBLGNBQUFpQyxLQUFBLFNBQUFDLEdBQ0EsR0FBQUMsa0JBQUFsQixRQU1BakIsRUFBQSxXQUFBNEIsUUFDQTVCLEVBQUEsV0FBQW9DLE9BRUFDLFVBQUEsRUFDQUMsY0FBQSxNQU9BdEMsRUFBQSxhQUFBNEIsT0FDQSxDQUFBLEdBQUFXLElBQ0FDLFNBQUEsTUFBQSxNQUFBLE1BQUEsTUFBQSxNQUFBLE9BQUEsT0FBQSxPQUFBLE9BQUEsMkJBQ0FDLFVBQUEsR0FDQUMsVUFBQSxHQUNBQyxVQUFBLEtBQ0FDLFdBQUEsS0FFQSxJQUFBQyxPQUFBLFlBQUFOLEdBUUF2QyxFQUFBLGNBQUE4QyxTQUNBQyxhQUFBLGVBQ0FDLGlCQUFBLEVBQ0FDLFNBQ0FDLFlBQUEscUJBQ0FDLE9BQUEsSUFLQW5ELEdBQUEsYUFBQTRCLFNBRUE1QixFQUFBLHdDQUFBb0QsR0FBQSxjQUFBLFdBQ0FwRCxFQUFBaUIsTUFBQW9DLFNBQUEsWUFFQXJELEVBQUEsd0NBQUFvRCxHQUFBLFdBQUEsV0FDQSxJQUFBcEQsRUFBQWlCLE1BQUFxQyxPQUNBdEQsRUFBQWlCLE1BQUFzQyxZQUFBLGFBT0F2RCxFQUFBQyxHQUFBK0IsT0FBQSxXQUNBNUIsRUFBQTRCLFlBR0F3QixPQUFBdkQsT0FBQUMiLCJmaWxlIjoic2NyaXB0cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuICAndXNlIHN0cmljdCc7XG5cblxuICAgICAgdmFyIHBhdHRlcm5zID0ge1xuICAgICAgICAgIGNhbnZhczEgOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhczFcIiksXG4gICAgICAgICAgY2FudmFzMiA6ICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhczJcIiksXG4gICAgICAgICAgYWN0aXZlQ2FudmFzIDogdHJ1ZSxcblxuICAgICAgICAgIHNldEJhY2tncm91bmQgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciBwYXR0ZXJuID0gVHJpYW5nbGlmeSh7XG4gICAgICAgICAgICAgICAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCxcbiAgICAgICAgICAgICAgICAgIHhfY29sb3JzOiB0aGlzLmdldENvbG9yKCksXG4gICAgICAgICAgICAgICAgICB2YXJpYW5jZTogMC45LFxuICAgICAgICAgICAgICAgICAgY2VsbF9zaXplOiBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpICogMTApICsgNjApLFxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBpZiAodGhpcy5hY3RpdmVDYW52YXMpIHtcbiAgICAgICAgICAgICAgICAgIHBhdHRlcm4uY2FudmFzKHRoaXMuY2FudmFzMSk7XG4gICAgICAgICAgICAgICAgICAkKFwiI2NhbnZhczJcIikuZmFkZU91dCgzMDAwKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlQ2FudmFzID0gZmFsc2U7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwYXR0ZXJuLmNhbnZhcyh0aGlzLmNhbnZhczIpO1xuICAgICAgICAgICAgICAgICAgJChcIiNjYW52YXMyXCIpLmZhZGVJbigzMDAwKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlQ2FudmFzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2V0Q29sb3I6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIHZhciBjb2xvcnMgPSBbXCJZbEduXCIsICdHcmV5cycsICdCbHVlcycsICdSZFB1JywgJ1B1QnVHbicsICdQdXJwbGVzJywgJ1B1T3InXVxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY29sb3JzLmxlbmd0aCldXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICB0aGlzLnNldEJhY2tncm91bmQoKVxuICAgICAgICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHNlbGYuc2V0QmFja2dyb3VuZCgpXG4gICAgICAgICAgICAgIH0sIDcwMDApXG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAvLyB0aGlzLmNhbnZhczEuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgICAgICAvLyB0aGlzLmNhbnZhczEud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgICAgICAgLy8gdGhpcy5jYW52YXMyLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgICAgICAgLy8gdGhpcy5jYW52YXMyLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgICAgfVxuICAgICAgfVxuXG5cblxuICAgICAgcGF0dGVybnMuaW5pdCgpO1xuXG5cblxuICAgIC8vIGluaXQgc2Nyb2xsYmFyIGluIGFib3V0IHBhZ2VcbiAgICBpZigkKFwiLmpzLXNjcm9sbFwiKS5sZW5ndGgpIHtcbiAgICAgICAgJChcIi5qcy1zY3JvbGxcIikuZWFjaChmdW5jdGlvbiggaW5kZXggKSB7XG4gICAgICAgICAgICBjb25zdCBwcyA9IG5ldyBQZXJmZWN0U2Nyb2xsYmFyKHRoaXMpO1xuICAgICAgICB9KVxuICAgIH1cblxuXG4gICAgLy8gSW5pdCBzbGlkZXJcbiAgICBpZigkKFwiLnNsaWRlclwiKS5sZW5ndGgpIHtcbiAgICAgICAgJCgnLnNsaWRlcicpLnNsaWNrKHtcbiAgICAgICAgICAgIC8vIGFycm93czogZmFsc2UsXG4gICAgICAgICAgICBhdXRvcGxheTogdHJ1ZSxcbiAgICAgICAgICAgIGF1dG9wbGF5U3BlZWQ6IDQwMDAsXG5cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cblxuICAgIGlmKCQoXCIuanMtY291bnRcIikubGVuZ3RoKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc3RyaW5nczogW1wiNXRoXCIsIFwiNXRoXCIsIFwiN3RoXCIsIFwiOHRoXCIsIFwiOXRoXCIsIFwiMTB0aFwiLCBcIjExdGhcIiwgXCIxMnRoXCIsIFwiMTN0aFwiLCBcIjE0dGgrIChJJ3ZlIGxvc3QgY291bnQpXCJdLFxuICAgICAgICAgICAgdHlwZVNwZWVkOiA5MCxcbiAgICAgICAgICAgIGJhY2tTcGVlZDogODAsXG4gICAgICAgICAgICBiYWNrRGVsYXk6IDEyMDAsXG4gICAgICAgICAgICBzdGFydERlbGF5OiAxNDAwMCxcbiAgICAgICAgfVxuICAgICAgICB2YXIgdHlwZWQgPSBuZXcgVHlwZWQoXCIuanMtY291bnRcIiwgb3B0aW9ucyk7XG4gICAgfVxuXG5cbiAgICAvLyBzXG5cblxuICAvLyBHcmlkXG4gICAgdmFyICRncmlkID0gJCgnLmNhcmRzLWlzbycpLmlzb3RvcGUoe1xuICAgICAgICBpdGVtU2VsZWN0b3I6ICcuY2FyZHNfX2NhcmQnLFxuICAgICAgICBwZXJjZW50UG9zaXRpb246IHRydWUsXG4gICAgICAgIG1hc29ucnk6IHtcbiAgICAgICAgICAgIGNvbHVtbldpZHRoOiAnLmNhcmRzX19jYXJkLXNpemVyJyxcbiAgICAgICAgICAgIGd1dHRlcjogNVxuICAgICAgICB9XG4gICAgfSk7XG5cblxuICAgIGlmKCQoXCIjanMtZm9ybXNcIikubGVuZ3RoKSB7XG5cbiAgICAgICAgJChcIiNqcy1mb3JtcyAuY2FyZHNfX2NhcmRfX2lucHV0cy1pbnB1dFwiKS5vbihcImNsaWNrIGZvY3VzXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICB9KVxuICAgICAgICAkKFwiI2pzLWZvcm1zIC5jYXJkc19fY2FyZF9faW5wdXRzLWlucHV0XCIpLm9uKFwiZm9jdXNvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmKCQodGhpcykudmFsKCkgPT0gJycpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuXG5cbiAgICAkKCB3aW5kb3cgKS5yZXNpemUoZnVuY3Rpb24oKSB7XG4gICAgICAgIHBhdHRlcm5zLnJlc2l6ZSgpXG4gICAgfSk7XG5cbn0pKGpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG4iXX0=
