/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2019. MIT licensed.
 */
!function(t,a,e,n){"use strict";var s={canvas1:e.getElementById("canvas1"),canvas2:e.getElementById("canvas2"),activeCanvas:!0,setBackground:function(){var e=Trianglify({width:a.innerWidth,height:a.innerHeight,x_colors:this.getColor(),variance:.9,cell_size:Math.floor(10*Math.random()+60)});this.activeCanvas?(e.canvas(this.canvas1),t("#canvas2").fadeOut(3e3),this.activeCanvas=!1):(e.canvas(this.canvas2),t("#canvas2").fadeIn(3e3),this.activeCanvas=!0)},getColor:function(){var t=["YlGn","Greys","Blues","RdPu","PuBuGn","Purples","PuOr"];return t[Math.floor(Math.random()*t.length)]},init:function(){var t=this;this.setBackground(),setInterval(function(){t.setBackground()},7e3)},resize:function(){}};if(s.init(),t(".js-scroll").length&&t(".js-scroll").each(function(t){new PerfectScrollbar(this)}),t(".slider").length&&t(".slider").slick({autoplay:!0,autoplaySpeed:4e3}),t(".js-count").length){var i={strings:["5th","5th","7th","8th","9th","10th","11th","12th","13th","14th+ (I've lost count)"],typeSpeed:90,backSpeed:80,backDelay:1200,startDelay:14e3};new Typed(".js-count",i)}t(".cards-iso").isotope({itemSelector:".cards__card",percentPosition:!0,masonry:{columnWidth:".cards__card-sizer",gutter:5}});t("#js-forms").length&&(t("#js-forms .cards__card__inputs-input").on("click focus",function(){t(this).addClass("active")}),t("#js-forms .cards__card__inputs-input").on("focusout",function(){""==t(this).val()&&t(this).removeClass("active")})),t(a).resize(function(){s.resize()})}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsImRvY3VtZW50IiwidW5kZWZpbmVkIiwicGF0dGVybnMiLCJjYW52YXMxIiwiZ2V0RWxlbWVudEJ5SWQiLCJjYW52YXMyIiwiYWN0aXZlQ2FudmFzIiwic2V0QmFja2dyb3VuZCIsInBhdHRlcm4iLCJUcmlhbmdsaWZ5Iiwid2lkdGgiLCJpbm5lcldpZHRoIiwiaGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJ4X2NvbG9ycyIsInRoaXMiLCJnZXRDb2xvciIsInZhcmlhbmNlIiwiY2VsbF9zaXplIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY2FudmFzIiwiZmFkZU91dCIsImZhZGVJbiIsImNvbG9ycyIsImxlbmd0aCIsImluaXQiLCJzZWxmIiwic2V0SW50ZXJ2YWwiLCJyZXNpemUiLCJlYWNoIiwiaW5kZXgiLCJQZXJmZWN0U2Nyb2xsYmFyIiwic2xpY2siLCJhdXRvcGxheSIsImF1dG9wbGF5U3BlZWQiLCJvcHRpb25zIiwic3RyaW5ncyIsInR5cGVTcGVlZCIsImJhY2tTcGVlZCIsImJhY2tEZWxheSIsInN0YXJ0RGVsYXkiLCJUeXBlZCIsImlzb3RvcGUiLCJpdGVtU2VsZWN0b3IiLCJwZXJjZW50UG9zaXRpb24iLCJtYXNvbnJ5IiwiY29sdW1uV2lkdGgiLCJndXR0ZXIiLCJvbiIsImFkZENsYXNzIiwidmFsIiwicmVtb3ZlQ2xhc3MiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0NBQUEsU0FBQUEsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxZQUdBLElBQUFDLElBQ0FDLFFBQUFILEVBQUFJLGVBQUEsV0FDQUMsUUFBQUwsRUFBQUksZUFBQSxXQUNBRSxjQUFBLEVBRUFDLGNBQUEsV0FDQSxHQUFBQyxHQUFBQyxZQUNBQyxNQUFBWCxFQUFBWSxXQUNBQyxPQUFBYixFQUFBYyxZQUNBQyxTQUFBQyxLQUFBQyxXQUNBQyxTQUFBLEdBQ0FDLFVBQUFDLEtBQUFDLE1BQUEsR0FBQUQsS0FBQUUsU0FBQSxLQUdBTixNQUFBVCxjQUNBRSxFQUFBYyxPQUFBUCxLQUFBWixTQUNBTCxFQUFBLFlBQUF5QixRQUFBLEtBQ0FSLEtBQUFULGNBQUEsSUFFQUUsRUFBQWMsT0FBQVAsS0FBQVYsU0FDQVAsRUFBQSxZQUFBMEIsT0FBQSxLQUNBVCxLQUFBVCxjQUFBLElBR0FVLFNBQUEsV0FDQSxHQUFBUyxJQUFBLE9BQUEsUUFBQSxRQUFBLE9BQUEsU0FBQSxVQUFBLE9BQ0EsT0FBQUEsR0FBQU4sS0FBQUMsTUFBQUQsS0FBQUUsU0FBQUksRUFBQUMsVUFFQUMsS0FBQSxXQUNBLEdBQUFDLEdBQUFiLElBQ0FBLE1BQUFSLGdCQUNBc0IsWUFBQSxXQUNBRCxFQUFBckIsaUJBQ0EsTUFFQXVCLE9BQUEsYUFrQ0EsSUF4QkE1QixFQUFBeUIsT0FLQTdCLEVBQUEsY0FBQTRCLFFBQ0E1QixFQUFBLGNBQUFpQyxLQUFBLFNBQUFDLEdBQ0EsR0FBQUMsa0JBQUFsQixRQU1BakIsRUFBQSxXQUFBNEIsUUFDQTVCLEVBQUEsV0FBQW9DLE9BRUFDLFVBQUEsRUFDQUMsY0FBQSxNQU9BdEMsRUFBQSxhQUFBNEIsT0FDQSxDQUFBLEdBQUFXLElBQ0FDLFNBQUEsTUFBQSxNQUFBLE1BQUEsTUFBQSxNQUFBLE9BQUEsT0FBQSxPQUFBLE9BQUEsMkJBQ0FDLFVBQUEsR0FDQUMsVUFBQSxHQUNBQyxVQUFBLEtBQ0FDLFdBQUEsS0FFQSxJQUFBQyxPQUFBLFlBQUFOLEdBUUF2QyxFQUFBLGNBQUE4QyxTQUNBQyxhQUFBLGVBQ0FDLGlCQUFBLEVBQ0FDLFNBQ0FDLFlBQUEscUJBQ0FDLE9BQUEsSUFLQW5ELEdBQUEsYUFBQTRCLFNBRUE1QixFQUFBLHdDQUFBb0QsR0FBQSxjQUFBLFdBQ0FwRCxFQUFBaUIsTUFBQW9DLFNBQUEsWUFFQXJELEVBQUEsd0NBQUFvRCxHQUFBLFdBQUEsV0FDQSxJQUFBcEQsRUFBQWlCLE1BQUFxQyxPQUNBdEQsRUFBQWlCLE1BQUFzQyxZQUFBLGFBT0F2RCxFQUFBQyxHQUFBK0IsT0FBQSxXQUNBNUIsRUFBQTRCLFlBR0F3QixPQUFBdkQsT0FBQUMiLCJmaWxlIjoic2NyaXB0cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcblxyXG4gICAgICB2YXIgcGF0dGVybnMgPSB7XHJcbiAgICAgICAgICBjYW52YXMxIDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXMxXCIpLFxyXG4gICAgICAgICAgY2FudmFzMiA6ICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhczJcIiksXHJcbiAgICAgICAgICBhY3RpdmVDYW52YXMgOiB0cnVlLFxyXG5cclxuICAgICAgICAgIHNldEJhY2tncm91bmQgOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgdmFyIHBhdHRlcm4gPSBUcmlhbmdsaWZ5KHtcclxuICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLFxyXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgeF9jb2xvcnM6IHRoaXMuZ2V0Q29sb3IoKSxcclxuICAgICAgICAgICAgICAgICAgdmFyaWFuY2U6IDAuOSxcclxuICAgICAgICAgICAgICAgICAgY2VsbF9zaXplOiBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpICogMTApICsgNjApLFxyXG4gICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICBpZiAodGhpcy5hY3RpdmVDYW52YXMpIHtcclxuICAgICAgICAgICAgICAgICAgcGF0dGVybi5jYW52YXModGhpcy5jYW52YXMxKTtcclxuICAgICAgICAgICAgICAgICAgJChcIiNjYW52YXMyXCIpLmZhZGVPdXQoMzAwMCk7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlQ2FudmFzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgcGF0dGVybi5jYW52YXModGhpcy5jYW52YXMyKTtcclxuICAgICAgICAgICAgICAgICAgJChcIiNjYW52YXMyXCIpLmZhZGVJbigzMDAwKTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVDYW52YXMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBnZXRDb2xvcjogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICB2YXIgY29sb3JzID0gW1wiWWxHblwiLCAnR3JleXMnLCAnQmx1ZXMnLCAnUmRQdScsICdQdUJ1R24nLCAnUHVycGxlcycsICdQdU9yJ11cclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY29sb3JzLmxlbmd0aCldXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgIHRoaXMuc2V0QmFja2dyb3VuZCgpXHJcbiAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgIHNlbGYuc2V0QmFja2dyb3VuZCgpXHJcbiAgICAgICAgICAgICAgfSwgNzAwMClcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIC8vIHRoaXMuY2FudmFzMS5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgLy8gdGhpcy5jYW52YXMxLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICAgICAgICAgICAgLy8gdGhpcy5jYW52YXMyLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgICAgICAgICAvLyB0aGlzLmNhbnZhczIud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICBwYXR0ZXJucy5pbml0KCk7XHJcblxyXG5cclxuXHJcbiAgICAvLyBpbml0IHNjcm9sbGJhciBpbiBhYm91dCBwYWdlXHJcbiAgICBpZigkKFwiLmpzLXNjcm9sbFwiKS5sZW5ndGgpIHtcclxuICAgICAgICAkKFwiLmpzLXNjcm9sbFwiKS5lYWNoKGZ1bmN0aW9uKCBpbmRleCApIHtcclxuICAgICAgICAgICAgY29uc3QgcHMgPSBuZXcgUGVyZmVjdFNjcm9sbGJhcih0aGlzKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBJbml0IHNsaWRlclxyXG4gICAgaWYoJChcIi5zbGlkZXJcIikubGVuZ3RoKSB7XHJcbiAgICAgICAgJCgnLnNsaWRlcicpLnNsaWNrKHtcclxuICAgICAgICAgICAgLy8gYXJyb3dzOiBmYWxzZSxcclxuICAgICAgICAgICAgYXV0b3BsYXk6IHRydWUsXHJcbiAgICAgICAgICAgIGF1dG9wbGF5U3BlZWQ6IDQwMDAsXHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgaWYoJChcIi5qcy1jb3VudFwiKS5sZW5ndGgpIHtcclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc3RyaW5nczogW1wiNXRoXCIsIFwiNXRoXCIsIFwiN3RoXCIsIFwiOHRoXCIsIFwiOXRoXCIsIFwiMTB0aFwiLCBcIjExdGhcIiwgXCIxMnRoXCIsIFwiMTN0aFwiLCBcIjE0dGgrIChJJ3ZlIGxvc3QgY291bnQpXCJdLFxyXG4gICAgICAgICAgICB0eXBlU3BlZWQ6IDkwLFxyXG4gICAgICAgICAgICBiYWNrU3BlZWQ6IDgwLFxyXG4gICAgICAgICAgICBiYWNrRGVsYXk6IDEyMDAsXHJcbiAgICAgICAgICAgIHN0YXJ0RGVsYXk6IDE0MDAwLFxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdHlwZWQgPSBuZXcgVHlwZWQoXCIuanMtY291bnRcIiwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIHNcclxuXHJcblxyXG4gIC8vIEdyaWRcclxuICAgIHZhciAkZ3JpZCA9ICQoJy5jYXJkcy1pc28nKS5pc290b3BlKHtcclxuICAgICAgICBpdGVtU2VsZWN0b3I6ICcuY2FyZHNfX2NhcmQnLFxyXG4gICAgICAgIHBlcmNlbnRQb3NpdGlvbjogdHJ1ZSxcclxuICAgICAgICBtYXNvbnJ5OiB7XHJcbiAgICAgICAgICAgIGNvbHVtbldpZHRoOiAnLmNhcmRzX19jYXJkLXNpemVyJyxcclxuICAgICAgICAgICAgZ3V0dGVyOiA1XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIGlmKCQoXCIjanMtZm9ybXNcIikubGVuZ3RoKSB7XHJcblxyXG4gICAgICAgICQoXCIjanMtZm9ybXMgLmNhcmRzX19jYXJkX19pbnB1dHMtaW5wdXRcIikub24oXCJjbGljayBmb2N1c1wiLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdhY3RpdmUnKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgJChcIiNqcy1mb3JtcyAuY2FyZHNfX2NhcmRfX2lucHV0cy1pbnB1dFwiKS5vbihcImZvY3Vzb3V0XCIsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGlmKCQodGhpcykudmFsKCkgPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgJCggd2luZG93ICkucmVzaXplKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHBhdHRlcm5zLnJlc2l6ZSgpXHJcbiAgICB9KTtcclxuXHJcbn0pKGpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XHJcbiJdfQ==
